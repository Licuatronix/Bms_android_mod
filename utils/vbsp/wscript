#! /usr/bin/env python
# encoding: utf-8
# vim: noexpandtab

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'vbsp'

def options(opt):
	# stub
	return

def configure(conf):
	return

def build(bld):
	source = [
		'boundbox.cpp',
		'brushbsp.cpp',
		'csg.cpp',
		'cubemap.cpp',
		'detail.cpp',
		'detailobjects.cpp',
		'disp_vbsp.cpp',
		'disp_ivp.cpp',
		'faces.cpp',
		'glfile.cpp',
		'ivp.cpp',
		'leakfile.cpp',
		'map.cpp',
		'manifest.cpp',
		'materialpatch.cpp',
		'materialsub.cpp',
		'nodraw.cpp',
		'normals.cpp',
		'overlay.cpp',
		'portals.cpp',
		'prtfile.cpp',
		'staticprop.cpp',
		'textures.cpp',
		'tree.cpp',
		'vbsp.cpp',
		'worldvertextransitionfixup.cpp',
		'writebsp.cpp',
		'../common/mstristrip.cpp',
		'../common/physdll.cpp',
#		'../common/scratchpad_helpers.cpp',
		'../common/utilmatlib.cpp',
		'../../public/collisionutils.cpp',
		'../../public/disp_common.cpp',
		'../../public/disp_powerinfo.cpp',
		'../../public/loadcmdline.cpp',
		'../../public/lumpfiles.cpp',
#		'../../public/scratchpad3d.cpp',
		'../../public/zip_utils.cpp',

		# Common files
		'../common/bsplib.cpp',
		'../common/cmdlib.cpp',
		'../common/filesystem_tools.cpp',
		'../common/map_shared.cpp',
		'../common/pacifier.cpp',
		'../common/polylib.cpp',
		'../common/scriplib.cpp',
		'../common/threads.cpp',
		'../../public/builddisp.cpp',
		'../../public/chunkfile.cpp',
		'../../public/filesystem_helpers.cpp',
		'../../public/filesystem_init.cpp',
	]

	if bld.env.DEST_OS == 'win32':
		source += ['../common/tools_minidump.cpp']
	else:
		source += ['../../filesystem/linux_support.cpp']

	includes = [
		'.',
		'../common',
		'../../public',
		'../../public/tier0',
		'../../public/tier1',
		'../../public/tier2',
		'../../public/tier3',
		'../../public/vtf',
		'../../public/vstdlib',
		'../../public/fgdlib',
	]

	defines = []

	libs = [
		'tier0', 'tier1', 'tier2',
		'vtf',
		'bitmap',
		'fgdlib',
		'mathlib',
		'vstdlib',
		'lzma',
		'vphysics',
		'shaderapiempty',
		'materialsystem',
	]

	if bld.env.DEST_OS == 'win32':
		libs += ['USER32']

	install_path = bld.env.BINDIR

	bld(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx cxxprogram',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

